@page "/Usb-Test"
@using ScannerWeb.Interfaces
@using ScannerWeb.Observer
@using ScannerWeb.Services
@using System.Diagnostics
@implements IDisposable
@inject NavigationManager navigation
@inject IArduinoService arduinoService
@inject IHttpContextAccessor httpContext;
<div class="container mx-auto p-3">
    <div class="flex w-full flex-col gap-3"
        <h3 class="text-center text-primary">
            Arduino USB Serial Check. Status: @arduinoService.GetConnectionStatus()
        </h3>
        <div class="grid grid-cols-2 gap-2">
            <button class="w-full bg-cyan-600 p-3 text-center text-white shadow hover:bg-cyan-300" @onclick="(_)=>ToggleArduinoConnection(true)">Connect Arduino USB</button>
            <button class="w-full bg-cyan-600 p-3 text-center text-white shadow hover:bg-cyan-300" @onclick="(_)=>ToggleArduinoConnection(false)">Disconnect Arduino USB</button>
        </div>
    </div>
</div>
@code {
    private bool isRender = false;

    private CancellationTokenSource cts = new CancellationTokenSource();
    private IDisposable? reg;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        cts = new CancellationTokenSource();
        isRender = !(httpContext.HttpContext?.Response.HasStarted ?? false);
    }
    protected async Task ToggleArduinoConnection(bool connect)
    {
        if (connect)
        {
            cts = new CancellationTokenSource();
            await arduinoService.Connect(cts.Token);
        }
        else
        {
            cts.Cancel();
            await arduinoService.CloseConnection();
        }
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            reg = navigation.RegisterLocationChangingHandler(Leave);
        }
    }
    public ValueTask Leave(LocationChangingContext ctx)
    {
        CloseDependecies();
        return ValueTask.CompletedTask;
    }
    public void CloseDependecies()
    {
        if (cts is not null)
        {
            cts.Cancel();
            cts.Dispose();
            cts = new();
        }
    }
    public void Dispose() {
        if (!isRender)
        {
            CloseDependecies();
            reg?.Dispose();
        }
    }



}
