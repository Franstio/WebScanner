@page "/"
@using Microsoft.Extensions.Options
@using Models;
@using ScannerWeb.Interfaces
@using ScannerWeb.Observer
@using ScannerWeb.Services
@using System.Diagnostics
@inject NavigationManager Navigation
@implements IDisposable
@inject IOptions<ConfigModel> options
@inject IArduinoService arduinoService
@inject IMainService mainService
@inject IHttpContextAccessor httpContext
@inject IPLCService PLCService
@inject ILogger<Main> logger;

<div class="container mx-auto">
    <div class="grid grid-cols-2 gap-2">
        
        <div class="bg-white rounded-lg shadow dark:bg-gray-800 p-4 md:p-6">
            <div class="flex justify-between  w-full mb-5">
                    <div class="w-full">
                        <h5 class="inline-flex items-center text-primary dark:text-gray-400 leading-none font-bold text-lg mb-2">
                            Weight
                        </h5>
                        <p class="text-black font-bold text-center dark:text-white text-2xl leading-none ">@Weight.ToString("0.00") KG</p>
                    </div>
            </div>
            <ApexChart TItem="GaugeValue" Options="Options" @ref="gauge">
                <ApexPointSeries   TItem="GaugeValue" Items="Items" 
                                 SeriesType=SeriesType.RadialBar  YValue="y=>y.Percentage" XValue="x=>x.Label" />
            </ApexChart>
        </div>
        <div class="bg-white rounded-lg shadow p-4 md:p-6">
            <div class="flex justify-between w-full mb-5">
                <div class="w-full">
                    <h5 class="inline-flex items-center text-primary dark:text-gray-400 leading-none font-bold text-lg mb-2">
                        Status
                    </h5>
                    <p class="text-black font-bold text-center dark:text-white text-2xl leading-none ">@ServerName</p>
                </div>
            </div>
            <ScannerWeb.Components.Shared.StatusComponent ShowLock="true"/>
        </div>
        <div class="bg-white rounded-lg col-span-2 shadow dark:bg-gray-800 p-4 md:p-6">
            <div class="flex justify-between  w-full mb-5">
                <div class="w-full">
                    <h5 class="inline-flex items-center text-primary dark:text-gray-400 leading-none font-bold text-lg mb-2">
                        Instruction
                    </h5>
                    <p class="text-black font-bold text-center dark:text-white text-2xl leading-none ">@Instruction</p>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    ApexChart<GaugeValue>? gauge;
    public decimal Weight = 10;
    public List<GaugeValue> Items = new List<GaugeValue>() { new GaugeValue() { Label = "Weight", Percentage = 10 } };
    private IDisposable? registration;

    public ApexChartOptions<GaugeValue> Options = new ApexChartOptions<GaugeValue>()
    {
        PlotOptions = new PlotOptions()
        {

            RadialBar= new PlotOptionsRadialBar()
            {
                DataLabels = new RadialBarDataLabels()
                {
                  Name = new RadialBarDataLabelsName()
                  {
                      Show=true
                  },
                  Value = new RadialBarDataLabelsValue()
                  {
                      Show=true,
                      Formatter = "function (val) {return val + '%'}",
                  }
                },
                EndAngle=90,
                StartAngle = -90,
                Track = new Track()
                {
                        Background = "#333",
                }

            }
        },
        Fill = new Fill()
        {
            Type = FillType.Gradient,
            Gradient = new FillGradient()
            {
                Shade = GradientShade.Light,
                Type = GradientType.Horizontal,
                    GradientToColors = new List<string>() { "#0094CE" },
                    Stops = new(){0,100}
            }
        }
    };
    public string ServerName = string.Empty;
    public string Instruction { get; set; } = "Idle";
    public ConfigModel? configModel;
    private CancellationTokenSource cts = new CancellationTokenSource();
    private ArduinoWeightObserver arduinoObserver = new ArduinoWeightObserver();
    private InstructionObserver instructionObserver = new InstructionObserver();
    private bool isPreRender = false;
    private bool Locked = true;
    private bool isRed = false;
    protected override async  Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        configModel = options.Value;
        isPreRender = !httpContext.HttpContext!.Response.HasStarted;
        if (!isPreRender)
        {
            Task.Run(async delegate { await PLCService.Connect(cts.Token);
                await PLCService.ToggleManual(PLCIndicatorObserver.PLCIndicatorEnum.YELLOW_LAMP, true);
            }).ConfigureAwait(false);

            cts = new CancellationTokenSource();
            arduinoObserver = new ArduinoWeightObserver();
            instructionObserver = new InstructionObserver();
            ServerName = Environment.MachineName;
            arduinoObserver.WeightReceivedEvent += WeightUpdate;
            arduinoObserver.Subscribe(arduinoService);
            Task.Run(async delegate { await arduinoService.Connect(cts.Token);},cts.Token).ConfigureAwait(false);
            instructionObserver.UpdateInstructionEvent += InstructionUpdate;
            instructionObserver.Subscribe(mainService);
            mainService.StartMonitor();

        }
        //Task.Run(MockWeightScale);
        //Task.Run(MockIndicator);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            registration = Navigation.RegisterLocationChangingHandler(LeavePage); 
        }
    }
    private async Task InstructionUpdate(string instruction)
    {
        Instruction = instruction;
        await InvokeAsync(StateHasChanged);
    }

    private async Task WeightUpdate(decimal _weight)
    {
        Weight = _weight;
        string color = "#0094CE";
        logger.LogDebug("From Arduino:" + _weight);
        decimal p = Items[0].Percentage = (Weight /configModel!.MaxWeight) * 100;
        bool nowRed = p > 90;
        if (nowRed && !isRed)
        {
            isRed = true;
            await PLCService.ToggleManual(PLCIndicatorObserver.PLCIndicatorEnum.RED_LAMP, true);
        }
        else if (!nowRed && isRed)
        {
            isRed = false;
            await PLCService.ToggleManual(PLCIndicatorObserver.PLCIndicatorEnum.RED_LAMP, false);
        }
        //        Task.Run(async delegate { await PLCService.ToggleManual(PLCIndicatorObserver.PLCIndicatorEnum.RED_LAMP, p > 90); }).ConfigureAwait(false);
        if (p > 90)
        {
            color = "#F44336";
        }
        else if (p > 50)
            color = "#FF5F15";
        if (gauge is not null)
        {
            try
            {
                if (configModel is null)
                    return;
                gauge.Options.Fill.Gradient.GradientToColors[0] = color;
                bool animate = Items[0].Percentage <= 100;
                await gauge.UpdateOptionsAsync(false, animate, false);
                await gauge.UpdateSeriesAsync(animate);
                await InvokeAsync(StateHasChanged);
            }
            catch(Exception ex)
            {
                logger.LogError(ex.Message);
            }
        }
        await InvokeAsync(StateHasChanged);
    }
    public ValueTask LeavePage(LocationChangingContext context)
    {
        CloseDependecies();
        return ValueTask.CompletedTask;
    }
    public void CloseDependecies()
    {
        if (cts is not null)
        {
            cts.Cancel();
            cts.Dispose();
            cts = new CancellationTokenSource();
        }
        instructionObserver.UpdateInstructionEvent -= InstructionUpdate;
        arduinoObserver.WeightReceivedEvent -= WeightUpdate;
        arduinoObserver.Unsubscribe();
        instructionObserver.Unsubscribe();
        arduinoObserver = new ArduinoWeightObserver();
        instructionObserver = new InstructionObserver();
        mainService.CancelMonitor();
    }
    public void Dispose()
    {
        if (!isPreRender)
        {
            CloseDependecies();
            registration?.Dispose();
        }
    }
}
